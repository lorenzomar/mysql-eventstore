<?php

/**
 * This file is part of the MySqlEventStore package.
 *
 * (c) Lorenzo Marzullo <marzullo.lorenzo@gmail.com>
 */

namespace MySqlEventStore\Repository;

use Doctrine\DBAL\Driver\Connection;
use MySqlEventStore\Event;
use MySqlEventStore\EventHydrator;
use MySqlEventStore\RepositoryInterface;
use Ramsey\Uuid\UuidInterface;

/**
 * Class DoctrineDbalRepository
 *
 * @package MySqlEventStore
 * @author  Lorenzo Marzullo <marzullo.lorenzo@gmail.com>
 * @link    https://github.com/lorenzomar/mysql-eventstore
 */
class DoctrineDbalRepository implements RepositoryInterface
{
    /**
     * @var Connection
     */
    private $connection;

    /**
     * @var EventHydrator
     */
    private $hydrator;

    /**
     * @var string
     */
    private $tableName;

    public function __construct(Connection $connection, EventHydrator $hydrator, $tableName)
    {
        $this->connection = $connection;
        $this->hydrator   = $hydrator;
        $this->tableName  = $tableName;
    }

    public function append($events)
    {
        $events = is_array($events) ? $events : [$events];

        foreach ($events as $event) {
            $e = $this->hydrator->extract($event);

            $this->connection->createQueryBuilder()
                             ->insert($this->tableName)
                             ->values([
                                 'uuid'            => ':uuid',
                                 'occurred_on'     => ':occurred_on',
                                 'name'            => ':name',
                                 'stream_id'       => ':stream_id',
                                 'stream_category' => ':stream_category',
                                 'payload'         => ':payload',
                                 'meta'            => ':meta',
                             ])
                             ->setParameters($e)
                             ->execute();

            // Hydrate event with autoincrement id generated by mysql
            $e['id'] = $this->connection->lastInsertId();

            $this->hydrator->hydrate($e, $event);
        }
    }

    public function getByUuid(UuidInterface $uuid, $default = null)
    {
        $event = $this->connection
            ->createQueryBuilder()
            ->select(['*'])
            ->from($this->tableName)
            ->where('uuid = :uuid')
            ->setParameter(':uuid', (string)$uuid)
            ->execute()
            ->fetch(\PDO::FETCH_ASSOC);

        if (!$event) {
            return $default;
        }

        return $this->hydrator->hydrate($event, Event::class);
    }

    public function getById($id, $default = null)
    {
        $event = $this->connection
            ->createQueryBuilder()
            ->select(['*'])
            ->from($this->tableName)
            ->where('id = :id')
            ->setParameter(':id', $id)
            ->execute()
            ->fetch(\PDO::FETCH_ASSOC);

        if (!$event) {
            return $default;
        }

        return $this->hydrator->hydrate($event, Event::class);
    }
}